package hope.smarteditor.common.utils;

import java.util.*;

public class KMPFilter {

    // KMP 部分匹配表构造函数
    private static int[] buildPartialMatchTable(String pattern) {
        int[] partialMatchTable = new int[pattern.length()];
        int j = 0; // 前缀末尾指针

        for (int i = 1; i < pattern.length(); i++) {
            while (j > 0 && pattern.charAt(i) != pattern.charAt(j)) {
                j = partialMatchTable[j - 1];
            }

            if (pattern.charAt(i) == pattern.charAt(j)) {
                j++;
            }

            partialMatchTable[i] = j;
        }

        return partialMatchTable;
    }

    // KMP 字符串匹配函数
    public static boolean kmpSearch(String text, String pattern) {
        int[] partialMatchTable = buildPartialMatchTable(pattern);
        int j = 0; // 模式串指针

        for (int i = 0; i < text.length(); i++) {
            while (j > 0 && text.charAt(i) != pattern.charAt(j)) {
                j = partialMatchTable[j - 1];
            }

            if (text.charAt(i) == pattern.charAt(j)) {
                j++;
            }

            if (j == pattern.length()) {
                return true; // 匹配成功
            }
        }

        return false; // 未找到匹配
    }

    // 过滤函数：检测生成文本是否包含敏感词或模式
    public static boolean filterText(String text, List<String> patterns) {
        for (String pattern : patterns) {
            if (kmpSearch(text, pattern)) {
                return true; // 发现敏感词
            }
        }
        return false; // 未发现敏感词
    }

/*    public static void main(String[] args) {
        // 示例大模型生成的文本
        String generatedText = "This is an example text generated by the model.";

        // 要过滤的敏感词列表
        List<String> sensitivePatterns = Arrays.asList("example", "sensitive", "filter");

        // 检测文本是否包含敏感词
        boolean hasSensitiveContent = filterText(generatedText, sensitivePatterns);

        if (hasSensitiveContent) {
            System.out.println("文本包含敏感内容，需过滤！");
        } else {
            System.out.println("文本未发现敏感内容，可以使用。");
        }
    }*/
}
